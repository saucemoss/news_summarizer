{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useRef, useState } from 'react';\nconst useInfiniteScroll = (callback, hasMore) => {\n  _s();\n  const observer = useRef();\n  const [isIntersecting, setIsIntersecting] = useState(false);\n  const triggerRef = useRef(null);\n  useEffect(() => {\n    const options = {\n      root: null,\n      rootMargin: '20px',\n      threshold: 0.1\n    };\n    observer.current = new IntersectionObserver(([entry]) => {\n      setIsIntersecting(entry.isIntersecting);\n      if (entry.isIntersecting && hasMore) {\n        callback();\n      }\n    }, options);\n\n    // Start observing the trigger element\n    if (triggerRef.current) {\n      observer.current.observe(triggerRef.current);\n    }\n    return () => {\n      if (observer.current) {\n        observer.current.disconnect();\n      }\n    };\n  }, [callback, hasMore]);\n  return [triggerRef, isIntersecting];\n};\n_s(useInfiniteScroll, \"fLuBPvxADZQmfLcYhKFl1JAtgWw=\");\nexport default useInfiniteScroll;","map":{"version":3,"names":["useEffect","useRef","useState","useInfiniteScroll","callback","hasMore","_s","observer","isIntersecting","setIsIntersecting","triggerRef","options","root","rootMargin","threshold","current","IntersectionObserver","entry","observe","disconnect"],"sources":["C:/dev/news_summarizer_cr/frontend/src/hooks/useInfiniteScroll.js"],"sourcesContent":["import { useEffect, useRef, useState } from 'react';\n\nconst useInfiniteScroll = (callback, hasMore) => {\n  const observer = useRef();\n  const [isIntersecting, setIsIntersecting] = useState(false);\n  const triggerRef = useRef(null);\n\n  useEffect(() => {\n    const options = {\n      root: null,\n      rootMargin: '20px',\n      threshold: 0.1\n    };\n\n    observer.current = new IntersectionObserver(([entry]) => {\n      setIsIntersecting(entry.isIntersecting);\n      if (entry.isIntersecting && hasMore) {\n        callback();\n      }\n    }, options);\n\n    // Start observing the trigger element\n    if (triggerRef.current) {\n      observer.current.observe(triggerRef.current);\n    }\n\n    return () => {\n      if (observer.current) {\n        observer.current.disconnect();\n      }\n    };\n  }, [callback, hasMore]);\n\n  return [triggerRef, isIntersecting];\n};\n\nexport default useInfiniteScroll; "],"mappings":";AAAA,SAASA,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAEnD,MAAMC,iBAAiB,GAAGA,CAACC,QAAQ,EAAEC,OAAO,KAAK;EAAAC,EAAA;EAC/C,MAAMC,QAAQ,GAAGN,MAAM,CAAC,CAAC;EACzB,MAAM,CAACO,cAAc,EAAEC,iBAAiB,CAAC,GAAGP,QAAQ,CAAC,KAAK,CAAC;EAC3D,MAAMQ,UAAU,GAAGT,MAAM,CAAC,IAAI,CAAC;EAE/BD,SAAS,CAAC,MAAM;IACd,MAAMW,OAAO,GAAG;MACdC,IAAI,EAAE,IAAI;MACVC,UAAU,EAAE,MAAM;MAClBC,SAAS,EAAE;IACb,CAAC;IAEDP,QAAQ,CAACQ,OAAO,GAAG,IAAIC,oBAAoB,CAAC,CAAC,CAACC,KAAK,CAAC,KAAK;MACvDR,iBAAiB,CAACQ,KAAK,CAACT,cAAc,CAAC;MACvC,IAAIS,KAAK,CAACT,cAAc,IAAIH,OAAO,EAAE;QACnCD,QAAQ,CAAC,CAAC;MACZ;IACF,CAAC,EAAEO,OAAO,CAAC;;IAEX;IACA,IAAID,UAAU,CAACK,OAAO,EAAE;MACtBR,QAAQ,CAACQ,OAAO,CAACG,OAAO,CAACR,UAAU,CAACK,OAAO,CAAC;IAC9C;IAEA,OAAO,MAAM;MACX,IAAIR,QAAQ,CAACQ,OAAO,EAAE;QACpBR,QAAQ,CAACQ,OAAO,CAACI,UAAU,CAAC,CAAC;MAC/B;IACF,CAAC;EACH,CAAC,EAAE,CAACf,QAAQ,EAAEC,OAAO,CAAC,CAAC;EAEvB,OAAO,CAACK,UAAU,EAAEF,cAAc,CAAC;AACrC,CAAC;AAACF,EAAA,CAhCIH,iBAAiB;AAkCvB,eAAeA,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}