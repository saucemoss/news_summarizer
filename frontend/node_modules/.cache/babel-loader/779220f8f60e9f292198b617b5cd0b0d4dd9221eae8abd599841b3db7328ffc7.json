{"ast":null,"code":"import{useEffect,useRef,useState}from'react';const useInfiniteScroll=(callback,hasMore,articles)=>{const observer=useRef();const[isIntersecting,setIsIntersecting]=useState(false);const triggerRef=useRef(null);useEffect(()=>{const options={root:null,rootMargin:'20px',threshold:0.1};observer.current=new IntersectionObserver(_ref=>{let[entry]=_ref;console.log('Intersection observed:',entry.isIntersecting);console.log('Has more items:',hasMore);setIsIntersecting(entry.isIntersecting);if(entry.isIntersecting&&hasMore){console.log('Triggering load more...');callback();}},options);return()=>{if(observer.current){observer.current.disconnect();}};},[callback,hasMore]);// Separate effect to handle observation\nuseEffect(()=>{if(observer.current&&triggerRef.current){console.log('Starting to observe trigger element');observer.current.observe(triggerRef.current);}else{console.log('Waiting for trigger element or observer to be ready');}},[articles]);// Re-run when articles change\nreturn[triggerRef,isIntersecting];};export default useInfiniteScroll;","map":{"version":3,"names":["useEffect","useRef","useState","useInfiniteScroll","callback","hasMore","articles","observer","isIntersecting","setIsIntersecting","triggerRef","options","root","rootMargin","threshold","current","IntersectionObserver","_ref","entry","console","log","disconnect","observe"],"sources":["C:/dev/news_summarizer_cr_aws/frontend/src/hooks/useInfiniteScroll.js"],"sourcesContent":["import { useEffect, useRef, useState } from 'react';\n\nconst useInfiniteScroll = (callback, hasMore, articles) => {\n  const observer = useRef();\n  const [isIntersecting, setIsIntersecting] = useState(false);\n  const triggerRef = useRef(null);\n\n  useEffect(() => {\n    const options = {\n      root: null,\n      rootMargin: '20px',\n      threshold: 0.1\n    };\n\n    observer.current = new IntersectionObserver(([entry]) => {\n      console.log('Intersection observed:', entry.isIntersecting);\n      console.log('Has more items:', hasMore);\n      setIsIntersecting(entry.isIntersecting);\n      if (entry.isIntersecting && hasMore) {\n        console.log('Triggering load more...');\n        callback();\n      }\n    }, options);\n\n    return () => {\n      if (observer.current) {\n        observer.current.disconnect();\n      }\n    };\n  }, [callback, hasMore]);\n\n  // Separate effect to handle observation\n  useEffect(() => {\n    if (observer.current && triggerRef.current) {\n      console.log('Starting to observe trigger element');\n      observer.current.observe(triggerRef.current);\n    } else {\n      console.log('Waiting for trigger element or observer to be ready');\n    }\n  }, [articles]); // Re-run when articles change\n\n  return [triggerRef, isIntersecting];\n};\n\nexport default useInfiniteScroll; "],"mappings":"AAAA,OAASA,SAAS,CAAEC,MAAM,CAAEC,QAAQ,KAAQ,OAAO,CAEnD,KAAM,CAAAC,iBAAiB,CAAGA,CAACC,QAAQ,CAAEC,OAAO,CAAEC,QAAQ,GAAK,CACzD,KAAM,CAAAC,QAAQ,CAAGN,MAAM,CAAC,CAAC,CACzB,KAAM,CAACO,cAAc,CAAEC,iBAAiB,CAAC,CAAGP,QAAQ,CAAC,KAAK,CAAC,CAC3D,KAAM,CAAAQ,UAAU,CAAGT,MAAM,CAAC,IAAI,CAAC,CAE/BD,SAAS,CAAC,IAAM,CACd,KAAM,CAAAW,OAAO,CAAG,CACdC,IAAI,CAAE,IAAI,CACVC,UAAU,CAAE,MAAM,CAClBC,SAAS,CAAE,GACb,CAAC,CAEDP,QAAQ,CAACQ,OAAO,CAAG,GAAI,CAAAC,oBAAoB,CAACC,IAAA,EAAa,IAAZ,CAACC,KAAK,CAAC,CAAAD,IAAA,CAClDE,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAEF,KAAK,CAACV,cAAc,CAAC,CAC3DW,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAEf,OAAO,CAAC,CACvCI,iBAAiB,CAACS,KAAK,CAACV,cAAc,CAAC,CACvC,GAAIU,KAAK,CAACV,cAAc,EAAIH,OAAO,CAAE,CACnCc,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC,CACtChB,QAAQ,CAAC,CAAC,CACZ,CACF,CAAC,CAAEO,OAAO,CAAC,CAEX,MAAO,IAAM,CACX,GAAIJ,QAAQ,CAACQ,OAAO,CAAE,CACpBR,QAAQ,CAACQ,OAAO,CAACM,UAAU,CAAC,CAAC,CAC/B,CACF,CAAC,CACH,CAAC,CAAE,CAACjB,QAAQ,CAAEC,OAAO,CAAC,CAAC,CAEvB;AACAL,SAAS,CAAC,IAAM,CACd,GAAIO,QAAQ,CAACQ,OAAO,EAAIL,UAAU,CAACK,OAAO,CAAE,CAC1CI,OAAO,CAACC,GAAG,CAAC,qCAAqC,CAAC,CAClDb,QAAQ,CAACQ,OAAO,CAACO,OAAO,CAACZ,UAAU,CAACK,OAAO,CAAC,CAC9C,CAAC,IAAM,CACLI,OAAO,CAACC,GAAG,CAAC,qDAAqD,CAAC,CACpE,CACF,CAAC,CAAE,CAACd,QAAQ,CAAC,CAAC,CAAE;AAEhB,MAAO,CAACI,UAAU,CAAEF,cAAc,CAAC,CACrC,CAAC,CAED,cAAe,CAAAL,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}