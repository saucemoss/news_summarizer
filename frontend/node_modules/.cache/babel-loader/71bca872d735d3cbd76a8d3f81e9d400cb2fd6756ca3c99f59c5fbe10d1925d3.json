{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useRef, useState } from 'react';\nconst useInfiniteScroll = (callback, hasMore) => {\n  _s();\n  const observer = useRef();\n  const [isIntersecting, setIsIntersecting] = useState(false);\n  const triggerRef = useRef(null);\n  useEffect(() => {\n    const options = {\n      root: null,\n      rootMargin: '100px',\n      threshold: 0.1\n    };\n    observer.current = new IntersectionObserver(([entry]) => {\n      setIsIntersecting(entry.isIntersecting);\n      if (entry.isIntersecting && hasMore) {\n        console.log('Trigger element intersected, loading more...');\n        callback();\n      }\n    }, options);\n\n    // Start observing the trigger element\n    const currentTrigger = triggerRef.current;\n    if (currentTrigger) {\n      console.log('Starting to observe trigger element');\n      observer.current.observe(currentTrigger);\n    }\n    return () => {\n      if (observer.current) {\n        observer.current.disconnect();\n      }\n    };\n  }, [callback, hasMore]);\n  return [triggerRef, isIntersecting];\n};\n_s(useInfiniteScroll, \"fLuBPvxADZQmfLcYhKFl1JAtgWw=\");\nexport default useInfiniteScroll;","map":{"version":3,"names":["useEffect","useRef","useState","useInfiniteScroll","callback","hasMore","_s","observer","isIntersecting","setIsIntersecting","triggerRef","options","root","rootMargin","threshold","current","IntersectionObserver","entry","console","log","currentTrigger","observe","disconnect"],"sources":["C:/dev/news_summarizer_cr/frontend/src/hooks/useInfiniteScroll.js"],"sourcesContent":["import { useEffect, useRef, useState } from 'react';\r\n\r\nconst useInfiniteScroll = (callback, hasMore) => {\r\n  const observer = useRef();\r\n  const [isIntersecting, setIsIntersecting] = useState(false);\r\n  const triggerRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const options = {\r\n      root: null,\r\n      rootMargin: '100px',\r\n      threshold: 0.1\r\n    };\r\n\r\n    observer.current = new IntersectionObserver(([entry]) => {\r\n      setIsIntersecting(entry.isIntersecting);\r\n      if (entry.isIntersecting && hasMore) {\r\n        console.log('Trigger element intersected, loading more...');\r\n        callback();\r\n      }\r\n    }, options);\r\n\r\n    // Start observing the trigger element\r\n    const currentTrigger = triggerRef.current;\r\n    if (currentTrigger) {\r\n      console.log('Starting to observe trigger element');\r\n      observer.current.observe(currentTrigger);\r\n    }\r\n\r\n    return () => {\r\n      if (observer.current) {\r\n        observer.current.disconnect();\r\n      }\r\n    };\r\n  }, [callback, hasMore]);\r\n\r\n  return [triggerRef, isIntersecting];\r\n};\r\n\r\nexport default useInfiniteScroll; "],"mappings":";AAAA,SAASA,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAEnD,MAAMC,iBAAiB,GAAGA,CAACC,QAAQ,EAAEC,OAAO,KAAK;EAAAC,EAAA;EAC/C,MAAMC,QAAQ,GAAGN,MAAM,CAAC,CAAC;EACzB,MAAM,CAACO,cAAc,EAAEC,iBAAiB,CAAC,GAAGP,QAAQ,CAAC,KAAK,CAAC;EAC3D,MAAMQ,UAAU,GAAGT,MAAM,CAAC,IAAI,CAAC;EAE/BD,SAAS,CAAC,MAAM;IACd,MAAMW,OAAO,GAAG;MACdC,IAAI,EAAE,IAAI;MACVC,UAAU,EAAE,OAAO;MACnBC,SAAS,EAAE;IACb,CAAC;IAEDP,QAAQ,CAACQ,OAAO,GAAG,IAAIC,oBAAoB,CAAC,CAAC,CAACC,KAAK,CAAC,KAAK;MACvDR,iBAAiB,CAACQ,KAAK,CAACT,cAAc,CAAC;MACvC,IAAIS,KAAK,CAACT,cAAc,IAAIH,OAAO,EAAE;QACnCa,OAAO,CAACC,GAAG,CAAC,8CAA8C,CAAC;QAC3Df,QAAQ,CAAC,CAAC;MACZ;IACF,CAAC,EAAEO,OAAO,CAAC;;IAEX;IACA,MAAMS,cAAc,GAAGV,UAAU,CAACK,OAAO;IACzC,IAAIK,cAAc,EAAE;MAClBF,OAAO,CAACC,GAAG,CAAC,qCAAqC,CAAC;MAClDZ,QAAQ,CAACQ,OAAO,CAACM,OAAO,CAACD,cAAc,CAAC;IAC1C;IAEA,OAAO,MAAM;MACX,IAAIb,QAAQ,CAACQ,OAAO,EAAE;QACpBR,QAAQ,CAACQ,OAAO,CAACO,UAAU,CAAC,CAAC;MAC/B;IACF,CAAC;EACH,CAAC,EAAE,CAAClB,QAAQ,EAAEC,OAAO,CAAC,CAAC;EAEvB,OAAO,CAACK,UAAU,EAAEF,cAAc,CAAC;AACrC,CAAC;AAACF,EAAA,CAnCIH,iBAAiB;AAqCvB,eAAeA,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}